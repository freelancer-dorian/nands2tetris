// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Not(in = instruction[15], out = isA);
    Not(in = isA, out = isC);

    // instruction[12] determin A or M
    Not(in = instruction[12],out = selA);
    Not(in = selA, out = selM);



    // load ALUout to A?
    And(a = isC, b = instruction[5], out = loadALUNeed);
    Mux16(a=instruction, b=outALU, sel=loadALUNeed, out=inAR);
    Or(a = isA, b = loadALUNeed, out = loadA);
    // if A instruction, addressM = instruction[0..14]
    ARegister(in=inAR, load=loadA, out=outAR, out[0..14] = addressM);


    Mux16(a= outAR, b=inM, sel=selM, out=aluYInput);
    
    And(a = isC, b = instruction[4], out = loadD);
    DRegister(in=outALU, load=loadD, out=outDR);

    And(a = isC, b = instruction[3], out = writeM);

    And(a = isC, b = instruction[11], out = inszx);
    And(a = isC, b = instruction[10], out = insnx);
    And(a = isC, b = instruction[9], out = inszy);
    And(a = isC, b = instruction[8], out = insny);
    And(a = isC, b = instruction[7], out = insf);
    And(a = isC, b = instruction[6], out = insno);

    ALU(x=outDR, y=aluYInput, zx=inszx, nx=insnx, zy=inszy, ny=insny, f=insf, no=insno, out=outM, out = outALU, zr=aluZR, ng=aluNG);

    And(a = instruction[2], b = isC, out = isLES);
    And(a = instruction[1], b = isC, out = isEQ);
    And(a = instruction[0], b = isC, out = isGRT);

    And(a = aluZR, b = isEQ, out = eqJump);
    And(a = aluNG, b = isLES, out = lesJump);

    Not(in = aluZR, out = notZR);
    Not(in = aluNG, out = notNG);
    And(a = notZR, b = notNG, out = outGRT);
    And(a = outGRT, b = isGRT, out = grtJump);

    Or(a = eqJump, b = lesJump, out = isJump1);
    Or(a = isJump1, b = grtJump, out = jump);    

    PC(in=outAR, load=jump, inc=true, reset=reset, out[0..14]=pc);
}

